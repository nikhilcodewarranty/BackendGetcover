{ name: new RegExp("\\b" + data.name + "\\b") }, {}  //for exact word matching
 let regex = new RegExp('^' + data.name + '$', 'i');



 <table style="width:100%">
  <tr>
    <th>Company</th>
    <td>Contact</td>
  </tr>
  <tr>
    <th>Alfreds Futterkiste vgybhbhy ghbhbhy <br/>hbyhbybu gvgbyvy vyvybyvu</th>
    <td>Maria Anders</td>
  </tr>
  <tr>
    <th>Centro comercial Moctezuma</th>
    <td>
Francisco Chang</td>
  </tr>
</table>















exports.getAllContracts = async (req, res) => {
  try {
    let data = req.body
    let pageLimit = data.pageLimit ? Number(data.pageLimit) : 100
    let skipLimit = data.page > 0 ? ((Number(req.body.page) - 1) * Number(pageLimit)) : 0
    let limitData = Number(pageLimit)
    // const index = await contractService.makeIndexForCollection();
    // console.log(index)
    // return;
    let newQuery = [];
    let matchedData = []
    if (data.dealerName) {
      newQuery.push(
        {
          $lookup: {
            from: "dealers",
            localField: "order.dealerId",
            foreignField: "_id",
            as: "order.dealer"
          }
        },
        // {
        //   $match: {
        //     $and: [
        //       { "order.dealer.name": { '$regex': data.dealerName ? data.dealerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        //     ]
        //   },
        // }
      );
      matchedData.push({ "order.dealer.name": { '$regex': data.dealerName ? data.dealerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } })
    }
    if (data.customerName) {
      newQuery.push(
        {
          $lookup: {
            from: "customers",
            localField: "order.customerId",
            foreignField: "_id",
            as: "order.customer"
          }
        },
        // {
        //   $match: {
        //     $and: [
        //       { "order.customer.username": { '$regex': data.customerName ? data.customerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        //     ]
        //   },
        // }
      );
      matchedData.push({ "order.customer.username": { '$regex': data.customerName ? data.customerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } })
    }
    if (data.servicerName) {
      newQuery.push(
        {
          $lookup: {
            from: "serviceproviders",
            localField: "order.servicerId",
            foreignField: "_id",
            as: "order.servicer"
          }
        },
        // {
        //   $match: {
        //     $and: [
        //       { "order.servicer.name": { '$regex': data.servicerName ? data.servicerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        //     ]
        //   },
        // }
      );
      matchedData.push({ "order.servicer.name": { '$regex': data.servicerName ? data.servicerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } })
    }
    if (data.resellerName) {
      newQuery.push(
        {
          $lookup: {
            from: "resellers",
            localField: "order.resellerId",
            foreignField: "_id",
            as: "order.reseller"
          }
        },
        // {
        //   $match: {
        //     $and: [
        //       { "order.reseller.name": { '$regex': data.resellerName ? data.resellerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        //     ]
        //   },
        // }
      );
      matchedData.push({ "order.reseller.name": { '$regex': data.resellerName ? data.resellerName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } })
    }
    if (matchedData.length > 0) {
      let matchedCondition = {
        $match: {
          $and: matchedData
        }
      };
      newQuery.push(matchedCondition);
    }

    newQuery.push(
      {
        $facet: {
          totalRecords: [
            {
              $count: "total"
            }
          ],
          data: [
            {
              $skip: skipLimit
            },
            {
              $limit: pageLimit
            },
            {
              $project: {
                productName: 1,
                model: 1,
                serial: 1,
                unique_key: 1,
                status: 1,
                manufacture: 1,
                eligibilty: 1,
                "order.unique_key": 1,
                "order.venderOrder": 1,
                totalRecords: 1
              }
            }
          ],
        },

      })
    let contractFilter = []
    if (data.eligibilty != '') {
      contractFilter = [
        // { unique_key: { $regex: `^${data.contractId ? data.contractId : ''}` } },
        { unique_key: { '$regex': data.contractId ? data.contractId.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { productName: { '$regex': data.productName ? data.productName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { serial: { '$regex': data.serial ? data.serial.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { manufacture: { '$regex': data.manufacture ? data.manufacture.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { model: { '$regex': data.model ? data.model.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { status: { '$regex': data.status ? data.status.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { eligibilty: data.eligibilty === "true" ? true : false },
      ]
    } else {
      contractFilter = [
        // { unique_key: { $regex: `^${data.contractId ? data.contractId : ''}` } },
        { unique_key: { '$regex': data.contractId ? data.contractId.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { productName: { '$regex': data.productName ? data.productName.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { serial: { '$regex': data.serial ? data.serial.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { manufacture: { '$regex': data.manufacture ? data.manufacture.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { model: { '$regex': data.model ? data.model.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
        { status: { '$regex': data.status ? data.status.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
      ]
    }

    let query = [
      { $sort: { unique_key_number: -1 } },
      {
        $match:
        {
          $and: contractFilter
        },
      },
      // {$limit: pageLimit},
      {
        $lookup: {
          from: "orders",
          localField: "orderId",
          foreignField: "_id",
          as: "order",
        }
      },
      {
        $unwind: {
          path: "$order",
          preserveNullAndEmptyArrays: true,
        }
      },
      {
        $match:
        {
          $and: [
            { "order.venderOrder": { '$regex': data.venderOrder ? data.venderOrder.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
            // { "order.unique_key": { $regex: `^${data.orderId ? data.orderId : ''}` } },
            { "order.unique_key": { '$regex': data.orderId ? data.orderId.replace(/\s+/g, ' ').trim() : '', '$options': 'i' } },
          ]
        },

      }
    ]

    if (newQuery.length > 0) {
      query = query.concat(newQuery);
    }


    // let query = [
    //   {
    //     $match:
    //     {
    //       $and: [
    //         { unique_key: { $regex: `^${data.contractId ? data.contractId : ''}` } },
    //         { productName: { $regex: `^${data.productName ? data.productName : ''}` } },
    //         { serial: { $regex: `^${data.serial ? data.serial : ''}` } },
    //         { manufacture: { $regex: `^${data.manufacture ? data.manufacture : ''}` } },
    //         { model: { $regex: `^${data.model ? data.model : ''}` } },
    //         { status: { $regex: `^${data.status ? data.status : ''}` } },
    //         // { eligibility: true },
    //       ]
    //     },
    //   },

    //   {
    //     $lookup: {
    //       from: "orders",
    //       localField: "orderId",
    //       foreignField: "_id",
    //       as: "order",
    //       pipeline: [
    //         {
    //           $lookup: {
    //             from: "dealers",
    //             localField: "dealerId",
    //             foreignField: "_id",
    //             as: "dealer",
    //             pipeline: [
    //               {
    //                 $match:
    //                 {
    //                   $and: [
    //                     { "name": { '$regex': data.dealerName ? data.dealerName : '', '$options': 'i' } },
    //                   ]
    //                 },
    //               }
    //             ]
    //           }
    //         },
    //         // {

    //         //   $match:
    //         //   {
    //         //     $and: [
    //         //       { "order.dealer.name": { '$regex': data.dealerName ? data.dealerName : '', '$options': 'i' } },
    //         //     ]
    //         //   },

    //         // },
    //         {
    //           $lookup: {
    //             from: "resellers",
    //             localField: "resellerId",
    //             foreignField: "_id",
    //             as: "reseller",
    //           }
    //         },
    //         {
    //           $lookup: {
    //             from: "customers",
    //             localField: "customerId",
    //             foreignField: "_id",
    //             as: "customer",
    //             pipeline: [
    //               {
    //                 $match:
    //                 {
    //                   $and: [

    //                     { "username": { '$regex': data.customerName ? data.customerName : '', '$options': 'i' } },
    //                   ]
    //                 },
    //               },
    //             ]
    //           }
    //         },
    //         // {
    //         //   $match:
    //         //   {
    //         //     $and: [

    //         //       { "customer.username": { '$regex': data.customerName ? data.customerName : '', '$options': 'i' } },
    //         //     ]
    //         //   },
    //         // },
    //         {
    //           $lookup: {
    //             from: "servicers",
    //             localField: "servicerId",
    //             foreignField: "_id",
    //             as: "servicer",
    //             pipeline: [
    //               {
    //                 $match:
    //                 {
    //                   $and: [
    //                     { "name": { '$regex': data.servicerName ? data.servicerName : '', '$options': 'i' } },
    //                   ]
    //                 },
    //               }
    //             ]
    //           }
    //         },
    //         // {
    //         //   $match:
    //         //   {
    //         //     $and: [
    //         //       { "order.servicer.name": { '$regex': data.servicerName ? data.servicerName : '', '$options': 'i' } },
    //         //     ]
    //         //   },
    //         // }

    //       ]
    //     }
    //   },

    //   {
    //     $match:
    //     {
    //       $and: [
    //         { "order.servicer.name": { '$regex': data.servicerName ? data.servicerName : '', '$options': 'i' } },
    //         { "order.venderOrder": { $regex: `^${data.venderOrder ? data.venderOrder : ''}` } },
    //         { "order.unique_key": { $regex: `^${data.orderId ? data.orderId : ''}` } },
    //         { "customer.username": { '$regex': data.customerName ? data.customerName : '', '$options': 'i' } },
    //         { "order.dealer.name": { '$regex': data.dealerName ? data.dealerName : '', '$options': 'i' } },
    //       ]

    //     },
    //   },

    //   { $sort: { unique_key_number: -1 } },

    //   {
    //     $facet: {
    //       totalRecords: [
    //         {
    //           $count: "total"
    //         }
    //       ],
    //       data: [
    //         {
    //           $skip: skipLimit
    //         },
    //         {
    //           $limit: pageLimit
    //         },
    //       ]
    //     },

    //   },
    // ]
    let getContracts = await contractService.getAllContracts2(query)
    let totalCount = getContracts[0].totalRecords[0]?.total ? getContracts[0].totalRecords[0].total : 0
    res.send({
      code: constant.successCode,
      message: "Success",
      result: getContracts[0]?.data ? getContracts[0]?.data : [],
      totalCount
      // count: getCo
    })

    // res.send({
    //   code: constant.successCode,
    //   message: "Success!",
    //   result: checkOrder,
    //   contractCount: totalContract.length,
    //   orderUserData: userData
    // });


  } catch (err) {
    console.log(err)
     res.send({
      code: constant.errorCode,
      message: err.message
    })
  }
}










<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html data-editor-version="2" class="sg-campaigns" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
    <!--[if !mso]><!-->
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <link href="https://fonts.cdnfonts.com/css/gilroy-bold" rel="stylesheet">
    <link rel="stylesheet" href="https://gistcdn.githack.com/mfd/09b70eb47474836f25a21660282ce0fd/raw/e06a670afcb2b861ed2ac4a1ef752d062ef6b46b/Gilroy.css">
    <style type="text/css">
        body, p, div {
          font-family: arial,helvetica,sans-serif;
          font-size: 14px;
        }
        body {
          color: #000000;
        }
        body a {
          color: #1188E6;
          text-decoration: none;
        }
        p { margin: 0; padding: 0; }
        table.wrapper {
          width:100% !important;
          table-layout: fixed;
          -webkit-font-smoothing: antialiased;
          -webkit-text-size-adjust: 100%;
          -moz-text-size-adjust: 100%;
          -ms-text-size-adjust: 100%;
        }
        img.max-width {
          max-width: 100% !important;
        }
        .column.of-2 {
          width: 50%;
        }
        .column.of-3 {
          width: 33.333%;
        }
        .column.of-4 {
          width: 25%;
        }
        ul ul ul ul  {
          list-style-type: disc !important;
        }
        ol ol {
          list-style-type: lower-roman !important;
        }
        ol ol ol {
          list-style-type: lower-latin !important;
        }
        ol ol ol ol {
          list-style-type: decimal !important;
        }
        @media screen and (max-width:480px) {
          .preheader .rightColumnContent,
          .footer .rightColumnContent {
            text-align: left !important;
          }
          .preheader .rightColumnContent div,
          .preheader .rightColumnContent span,
          .footer .rightColumnContent div,
          .footer .rightColumnContent span {
            text-align: left !important;
          }
          .preheader .rightColumnContent,
          .preheader .leftColumnContent {
            font-size: 80% !important;
            padding: 5px 0;
          }
          table.wrapper-mobile {
            width: 100% !important;
            table-layout: fixed;
          }
          img.max-width {
            height: auto !important;
            max-width: 100% !important;
          }
          a.bulletproof-button {
            display: block !important;
            width: auto !important;
            font-size: 80%;
            padding-left: 0 !important;
            padding-right: 0 !important;
          }
          .columns {
            width: 100% !important;
          }
          .column {
            display: block !important;
            width: 100% !important;
            padding-left: 0 !important;
            padding-right: 0 !important;
            margin-left: 0 !important;
            margin-right: 0 !important;
          }
          .social-icon-column {
            display: inline-block !important;
          }
        }
    table {
       font-family: 'Gilroy', sans-serif;
                                                       
    }
    h3 {
         font-family: 'Gilroy', sans-serif;
    }
    </style>
    <!--End Head user entered-->
</head>

<body>
    <center class="wrapper" data-link-color="#1188E6" data-body-style="font-size:14px; font-family:arial,helvetica,sans-serif; color:#000000; background-color:#FFFFFF;">
        <div class="webkit">
            <table cellpadding="0" cellspacing="0" border="0" width="100%" class="wrapper" bgcolor="#FFFFFF">
                <tr>
                    <td valign="top" bgcolor="#FFFFFF" width="100%">
                        <table width="100%" role="content-container" class="outer" align="center" cellpadding="0" cellspacing="0" border="0">
                            <tr>
                                <td width="100%">
                                    <table width="100%" cellpadding="0" cellspacing="0" border="0">
                                        <tr>
                                            <td>

                                                <table width="100%" cellpadding="0" cellspacing="0" border="0" style="width:100%; max-width:600px;" align="center">
                                                    <tr>
                                                        <td role="modules-container" style="padding:0px 0px 0px 0px; color:#000000; text-align:left;" bgcolor="#FFFFFF" width="100%" align="left">
                                                            <table class="module preheader preheader-hide" role="module" data-type="preheader" border="0" cellpadding="0" cellspacing="0" width="100%" style="display: none !important; mso-hide: all; visibility: hidden; opacity: 0; color: transparent; height: 0; width: 0;">
                                                                <tr>
                                                                    <td role="module-content">

                                                                    </td>
                                                                </tr>
                                                            </table>
                                                            <table class="wrapper" role="module" data-type="image" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;" data-muid="9cfe9479-6cfb-4ac4-92e9-465926e3adf6">
                                                                <tbody>
                                                                    <tr style="background-color:#333333;">
                                                                        <td style="padding-left:20px">
                                                                            <h1 style="font-size:35px; color:white; display:flex;">Hello, {{dealerName}} <img src ="http://cdn.mcauto-images-production.sendgrid.net/ec405a48da391a56/f927512d-fc88-4ea8-82db-40433ac90150/44x43.png" style="margin-left:10px"/></h1>
                                                                        </td>
                                                                        <td style="font-size:6px; line-height:10px; padding:10px 0px 10px 0px; margin-right:20px; display:flex; justify-content:end; align-self:end;" valign="top" align="center">
                                                                            <img class="max-width" border="0" style="display:block;margin-top:10px; self-align:center; color:#000000; text-decoration:none; font-family:Helvetica, arial, sans-serif; font-size:16px; max-width:100% !important; width:70%; height:auto !important;" width="198"
                                                                            alt="" data-proportionally-constrained="true" data-responsive="true" src="http://cdn.mcauto-images-production.sendgrid.net/8f5900406ed7c5a4/b1508b3b-633d-4d10-9ea2-ef5391db13c0/224x53.png">
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <table class="module" role="module" data-type="spacer" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;" data-muid="d579483a-5436-4fbc-b34f-e4880caea520">
                                                                <tbody>
                                                                    <tr>
                                                                        <td style="padding:0px 0px 20px 0px;" role="module-content" bgcolor="">
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <table class="wrapper" role="module" data-type="image" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;" data-muid="9cfe9479-6cfb-4ac4-92e9-465926e3adf6.1">
                                                                <tbody>
                                                                    <tr>
                                                                        <td style="font-size:6px; line-height:10px; padding:0px 0px 0px 0px;" valign="top" align="center">

                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <table class="module" role="module" data-type="text" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;" data-muid="7d08d643-b1b9-40dc-af0d-5ce2fe3461c0" data-mc-module-version="2019-10-22">
                                                                <tbody>
                                                                    <tr>
                                                                        <td style="padding:18px 0px 1px 0px; line-height:28px; text-align:inherit;" height="100%" valign="top" bgcolor="" role="module-content">
                                                                            <div>
                                                                                <h1 style="text-align: center"><span style="white-space-collapse: preserve; text-wrap: wrap; color: #999999;   font-family: 'Gilroy', sans-serif;">Thank you for </span></span><span style="white-space-collapse: preserve; text-wrap: wrap; color: #333333; font-family: 'Gilroy', sans-serif;">Registering! as a <br/> {{role}} </span><span style="color: #333333;   font-family: 'Gilroy', sans-serif;">&nbsp;</span></h1>
                                                                                <div></div>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                            <table class="module" role="module" data-type="text" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;" data-muid="3c786a59-6824-4788-95af-9e1b963caaae" data-mc-module-version="2019-10-22">
                                                                <tbody>
                                                                    <tr>
                                                                        <td style="padding:18px 0px 18px 0px; line-height:22px; text-align:inherit;" height="100%" valign="top" bgcolor="" role="module-content">
                                                                            <div>
                                                                                <div style="font-family: inherit; text-align: center"><span style="white-space-collapse: preserve; text-wrap: wrap; color: #999999;   font-family: 'Gilroy', sans-serif; font-size: 14px">Your account is currently pending approval from our admin. <br/> Once approved, you will receive a confirmation email.</span>
                                                                                    <span
                                                                                    style="color: #999999;   font-family: 'Gilroy', sans-serif; font-size: 14px">
                                                                                        </span><span style="white-space-collapse: preserve; text-wrap: wrap; color: #999999;   font-family: 'Gilroy', sans-serif; font-size: 14px"> <br/><b>  We appreciate your patience. </b>.</span>
                                                                                        <span
                                                                                        style="color: #999999;   font-family: 'Gilroy', sans-serif; font-size: 14px">&nbsp;</span>
                                                                                </div>
                                                                                <div></div>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>


                                                    </tr>
                                                    <tr>
                                                        <table class="wrapper" role="module" data-type="image" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed; margin-top:40px" data-muid="9cfe9479-6cfb-4ac4-92e9-465926e3adf6">
                                                            <tbody>
                                                                <tr style="background-color:#E5E5E5;">
                                                                    <td style="padding-left:20px; text-align:center; padding-bottom:20px;">
                                                                        <h1 style="font-size:18px;font-family: 'Gilroy', sans-serif;">Address </h1>
                                                                        <p style="color:#333333; font-family: 'Gilroy', sans-serif;"> 132, My Street, Kingston New York 12401
                                                                            <br/> new york, NY 12401 USA
                                                                            <br/> This email was sent to - <a style="color:#333333; font-family: 'Gilroy', sans-serif;" href="mailto:technology@getcover.com">technology@getcover.com</a>
                                                                            <br/>
                                                                        </p>
                                                                        <img class="max-width" border="0" style="display:block;margin:10px auto; self-align:center; color:#000000; text-decoration:none; font-family:Helvetica, arial, sans-serif; font-size:16px; max-width:100% !important; width:30%; height:auto !important;" alt=""
                                                                        data-proportionally-constrained="true" data-responsive="true" src="http://cdn.mcauto-images-production.sendgrid.net/8f5900406ed7c5a4/b1508b3b-633d-4d10-9ea2-ef5391db13c0/224x53.png">
                                                                    </td>
                                                                </tr>
                                                            </tbody>
                                                        </table>
                                                    </tr>
                                                </table>
                                                </td>
                                        </tr>
                                    </table>
                                    </td>
                            </tr>
                        </table>
                        </td>
                </tr>
            </table>
        </div>
    </center>
</body>

</html>










from dealer productValue

// create dealer by super admin
// exports.createDealer = async (req, res) => {
//   try {
//     upload(req, res, async () => {
//       const data = req.body;
//       data.name = data.name.trim().replace(/\s+/g, ' ');
//       let priceFile
//       let termFile;
//       let isAccountCreate = req.body.isAccountCreate
//       let file = req.files
//       for (i = 0; i < file.length; i++) {
//         if (file[i].fieldname == 'termCondition') {
//           termFile = file[i]
//           // termFile.push(file[i].filename);
//         } else if (file[i].fieldname == 'file') {
//           priceFile = file[i]
//         }
//       }
//       // Check if the specified role exists
//       const checkRole = await role.findOne({ role: { '$regex': data.role, '$options': 'i' } });
//       if (!checkRole) {
//         res.send({
//           code: constant.errorCode,
//           message: "Invalid role"
//         });
//         return;
//       }
//       let passedEnteries = []
//       let priceBook = [];
//       let priceBookIds = [];
//       let csvStatus = [];
//       const primaryUserData = data.dealerPrimary ? data.dealerPrimary : [];
//       const dealersUserData = data.dealers ? data.dealers : [];
//       const allEmails = [...dealersUserData, ...primaryUserData].map((dealer) => dealer.email);
//       let checkPriceBook = [];
//       let dealerPriceArray = data.priceBook ? data.priceBook : [];
//       const uniqueEmails = new Set(allEmails);
//       if (allEmails.length !== uniqueEmails.size) {
//         res.send({
//           code: constant.errorCode,
//           message: 'Multiple user cannot have same email',
//         });
//         return
//       }
//       let count = await dealerPriceService.getDealerPriceCount();

//       let savePriceBookType = req.body.savePriceBookType
//       const allUserData = [...dealersUserData, ...primaryUserData];
//       if (data.dealerId != 'null' && data.dealerId != undefined) {
//         if (data.email != data.oldEmail) {
//           let emailCheck = await userService.findOneUser({ email: data.email }, {});
//           if (emailCheck) {
//             res.send({
//               code: constant.errorCode,
//               message: "Primary user email already exist"
//             })
//             return;
//           }
//         }

//         if (data.name != data.oldName) {
//           let nameCheck = await dealerService.getDealerByName({ name: data.name });
//           if (nameCheck) {
//             res.send({
//               code: constant.errorCode,
//               message: "Dealer name already exist"
//             })
//             return;
//           }
//         }
//         const singleDealerUser = await userService.findOneUser({ accountId: data.dealerId }, {});
//         const singleDealer = await dealerService.getDealerById({ _id: data.dealerId });
//         if (!singleDealer) {
//           res.send({
//             code: constant.errorCode,
//             message: "Dealer Not found"
//           });
//           return;
//         }
//         if (savePriceBookType == 'yes') {
//           priceBook = dealerPriceArray.map((dealer) => dealer.priceBookId);
//           const priceBookCreateria = { _id: { $in: priceBook } }
//           checkPriceBook = await priceBookService.getMultiplePriceBok(priceBookCreateria, { isDeleted: false })
//           if (checkPriceBook.length == 0) {
//             res.send({
//               code: constant.errorCode,
//               message: "Product does not exist.Please check the product"
//             })
//             return;
//           }
//           const missingProductNames = priceBook.filter(name => !checkPriceBook.some(product => product._id.equals(name)));
//           if (missingProductNames.length > 0) {
//             res.send({
//               code: constant.errorCode,
//               message: 'Some products is not created. Please check the product',
//               missingProductNames: missingProductNames
//             });
//             return;
//           }
//           const cleanStr1 = singleDealer.name.replace(/\s/g, '').toLowerCase();
//           const cleanStr2 = data.name.replace(/\s/g, '').toLowerCase();


//           if (cleanStr1 !== cleanStr2) {
//             const existingDealer = await dealerService.getDealerByName({ name: { '$regex': data.name, '$options': 'i' } }, { isDeleted: 0, __v: 0 });
//             if (existingDealer) {
//               res.send({
//                 code: constant.errorCode,
//                 message: 'Dealer name already exists',
//               });
//               return
//             }
//           }
//           //check product is already exist for dealer this
//           priceBookIds = dealerPriceArray.map((dealer) => new mongoose.Types.ObjectId(dealer.priceBookId));
//           if (priceBook.length > 0) {
//             let query = {
//               $and: [
//                 { 'priceBook': { $in: priceBookIds } },
//                 { 'dealerId': new mongoose.Types.ObjectId(data.dealerId) }
//               ]
//             }

//             const existingData = await dealerPriceService.findByIds(query);
//             if (existingData.length > 0) {
//               res.send({
//                 code: constant.errorCode,
//                 message: 'The product is already exist for this dealer! Duplicasy found. Please check again',
//               });
//               return;
//             }

//           }
//           const resultPriceData = dealerPriceArray.map((obj, index) => ({
//             'priceBook': obj.priceBookId,
//             'dealerId': data.dealerId,
//             'brokerFee': Number(obj.retailPrice) - Number(obj.wholesalePrice),
//             'retailPrice': obj.retailPrice,
//             "status": obj.status,
//             'wholesalePrice': obj.wholesalePrice,
//             'unique_key': Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + index + 1,
//           }));
//           //Primary information edit

//           let userQuery = { accountId: { $in: [data.dealerId] }, isPrimary: true }

//           let newValues1 = {
//             $set: {
//               email: allUserData[0].email,
//               firstName: allUserData[0].firstName,
//               lastName: allUserData[0].lastName,
//               phoneNumber: allUserData[0].phoneNumber,
//               position: allUserData[0].position,
//               roleId: '656f08041eb1acda244af8c6',
//               status: allUserData[0].status ? true : false,
//             }
//           }

//           let updateStatus = await userService.updateUser(userQuery, newValues1, { new: true })
//           const createPriceBook = await dealerPriceService.insertManyPrices(resultPriceData);
//           if (!createPriceBook) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to save price book"
//             });
//             return;
//           }
//           let allUsersData = allUserData.map((obj, index) => ({
//             ...obj,
//             roleId: '656f08041eb1acda244af8c6',
//             accountId: data.dealerId,
//             metaId: data.dealerId,
//             isPrimary: index === 0 ? true : false,
//             status: !req.body.isAccountCreate || req.body.isAccountCreate == 'false' ? false : obj.status

//           }));
//           if (allUsersData.length > 1) {
//             allUsersData = [...allUsersData.slice(0, 0), ...allUsersData.slice(1)];
//             const createUsers = await userService.insertManyUser(allUsersData);
//             if (!createUsers) {
//               res.send({
//                 code: constant.errorCode,
//                 message: "Unable to save users"
//               });
//               return;
//             }
//           }
//           let dealerQuery = { _id: data.dealerId }
//           let newValues = {
//             $set: {
//               status: "Approved",
//               serviceCoverageType: req.body.serviceCoverageType,
//               isShippingAllowed: req.body.isShippingAllowed,
//               isAccountCreate: isAccountCreate,
//               coverageType: req.body.coverageType,
//               termCondition: termFile ? termFile : '',
//               accountStatus: true,
//               isAccountCreate: isAccountCreate,
//               isServicer: data.isServicer ? data.isServicer : false
//             }
//           }
//           let dealerStatus = await dealerService.updateDealer(dealerQuery, newValues, { new: true })
//           if (!dealerStatus) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to approve dealer status"
//             });
//             return;
//           }

//           let statusUpdateCreateria = { accountId: { $in: [data.dealerId] } }
//           let updateData = {
//             $set: {
//               approvedStatus: 'Approved'
//             }
//           }
//           let updateUserStatus = await userService.updateUser(statusUpdateCreateria, updateData, { new: true })

//           //  let userStatus = await dealerService.updateDealer(dealerQuery, newValues, { new: true })
//           if (req.body.isAccountCreate) {
//             let resetPasswordCode = randtoken.generate(4, '123456789')
//             let resetLink = `http://15.207.221.207/newPassword/${singleDealerUser._id}/${resetPasswordCode}`
//             constmailing = await sgMail.send(emailConstant.dealerApproval(singleDealerUser.email, { link: resetLink }))
//             let updateStatus = await userService.updateUser({ _id: singleDealerUser._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })

//           }
//           if (req.body.isServicer) {
//             const CountServicer = await providerService.getServicerCount();

//             let servicerObject = {
//               name: data.name,
//               street: data.street,
//               city: data.city,
//               zip: data.zip,
//               dealerId: req.body.dealerId,
//               state: data.state,
//               country: data.country,
//               status: data.status,
//               accountStatus: "Approved",
//               unique_key: Number(CountServicer.length > 0 && CountServicer[0].unique_key ? CountServicer[0].unique_key : 0) + 1
//             }

//             let createData = await providerService.createServiceProvider(servicerObject)
//           }
//           res.send({
//             code: constant.successCode,
//             message: 'Successfully Created',
//           });

//         }
//         else if (savePriceBookType == 'no') {
//           // uploadP(req, res, async (err) => {
//           let file = req.file
//           let data = req.body

//           if (!req.file) {
//             res.send({
//               code: constant.errorCode,
//               message: "No file uploaded"
//             })
//             return;
//           }

//           const cleanStr1 = singleDealer.name.replace(/\s/g, '').toLowerCase();
//           const cleanStr2 = data.name.replace(/\s/g, '').toLowerCase();
//           if (cleanStr1 !== cleanStr2) {
//             const existingDealer = await dealerService.getDealerByName({ name: { '$regex': data.name, '$options': 'i' } }, { isDeleted: 0, __v: 0 });
//             if (existingDealer) {
//               res.send({
//                 code: constant.errorCode,
//                 message: 'Dealer name already exists',
//               });
//               return
//             }
//           }


//           let csvName = priceFile.filename
//           const csvWriter = createCsvWriter({
//             path: './uploads/resultFile/' + csvName,
//             header: [
//               { id: 'priceBook', title: 'Price Book' },
//               { id: 'status', title: 'Status' },
//               { id: 'reason', title: 'Reason' },
//               // Add more headers as needed
//             ],
//           });
//           const wb = XLSX.readFile(priceFile.path);
//           const sheets = wb.SheetNames;
//           const ws = wb.Sheets[sheets[0]];
//           const headers = [];
//           for (let cell in ws) {
//             // Check if the cell is in the first row and has a non-empty value
//             if (/^[A-Z]1$/.test(cell) && ws[cell].v !== undefined && ws[cell].v !== null && ws[cell].v.trim() !== '') {
//               headers.push(ws[cell].v);
//             }
//           }

//           if (headers.length !== 2) {
//             res.send({
//               code: constant.errorCode,
//               message: "Invalid file format detected. The sheet should contain exactly two columns."
//             })
//             return
//           }
//           let totalDataComing1 = XLSX.utils.sheet_to_json(wb.Sheets[sheets[0]]);
//           totalDataComing1 = totalDataComing1.map(item => {
//             if (!item.priceBook) {
//               return { priceBook: '', 'RetailP rice': item['RetailP rice'] };
//             }
//             return item;
//           });
//           const totalDataComing = totalDataComing1.map(item => {
//             const keys = Object.keys(item);
//             return {
//               priceBook: item[keys[0]],
//               retailPrice: item[keys[1]],
//               duplicates: [],
//               exit: false
//             };
//           });

//           totalDataComing.forEach(data => {
//             if (!data.retailPrice || typeof (data.retailPrice) != 'number' || data.retailPrice <= 0) {
//               data.status = "Dealer catalog retail price is not valid";
//               data.exit = true;
//             }
//             else {
//               data.status = null
//             }
//           })

//           const repeatedMap = {};
//           for (let i = totalDataComing.length - 1; i >= 0; i--) {
//             console.log("uniquw", i, totalDataComing[i]);
//             if (totalDataComing[i].exit) {
//               continue;
//             }
//             // if (repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()] >= 0) {
//             //   totalDataComing[i].status = "not unique";
//             //   totalDataComing[i].exit = true;
//             //   const index = repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()];
//             //   totalDataComing[index].duplicates.push(i);
//             // } else {

//             //   repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()] = i;
//             //   totalDataComing[i].status = null;
//             // }
//             if (repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()] >= 0) {
//               totalDataComing[i].status = "not unique";
//               totalDataComing[i].exit = true;
//               const index = repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()];
//               totalDataComing[index].duplicates.push(i);
//             } else {
//               repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()] = i;
//               totalDataComing[i].status = null;
//             }
//           }

//           const pricebookArrayPromise = totalDataComing.map(item => {
//             if (!item.status) return priceBookService.findByName1({ name: item.priceBook ? new RegExp(`^${item.priceBook.toString().replace(/\s+/g, ' ').trim()}$`, 'i') : '', status: true });
//             return null;
//           })

//           const pricebooksArray = await Promise.all(pricebookArrayPromise);
//           for (let i = 0; i < totalDataComing.length; i++) {
//             if (!pricebooksArray[i]) {
//               if (!totalDataComing[i].exit) {
//                 totalDataComing[i].status = "price catalog does not exist";
//                 totalDataComing[i].duplicates.forEach((index) => {
//                   totalDataComing[index].status = "price catalog does not exist";
//                 })
//               }
//               totalDataComing[i].priceBookDetail = null
//             } else {
//               totalDataComing[i].priceBookDetail = pricebooksArray[i];
//             }
//           }
//           const dealerArrayPromise = totalDataComing.map(item => {
//             if (item.priceBookDetail) return dealerPriceService.getDealerPriceById({ dealerId: new mongoose.Types.ObjectId(req.body.dealerId), priceBook: item.priceBookDetail._id }, {});
//             return false;
//           })
//           const dealerArray = await Promise.all(dealerArrayPromise);
//           for (let i = 0; i < totalDataComing.length; i++) {
//             if (totalDataComing[i].priceBookDetail) {
//               if (dealerArray[i]) {
//                 dealerArray[i].retailPrice = totalDataComing[i].retailPrice != undefined ? totalDataComing[i].retailPrice : dealerArray[i].retailPrice;
//                 dealerArray[i].brokerFee = dealerArray[i].retailPrice - dealerArray[i].wholesalePrice
//                 await dealerArray[i].save();

//                 totalDataComing[i].status = "Dealer catalog updated successully";
//                 totalDataComing[i].duplicates.forEach((index) => {
//                   totalDataComing[index].status = "Dealer catalog updated successully";
//                 })

//               } else {
//                 const count = await dealerPriceService.getDealerPriceCount();
//                 let unique_key = Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + 1
//                 let wholesalePrice = totalDataComing[i].priceBookDetail.reserveFutureFee + totalDataComing[i].priceBookDetail.reinsuranceFee + totalDataComing[i].priceBookDetail.adminFee + totalDataComing[i].priceBookDetail.frontingFee;
//                 await dealerPriceService.createDealerPrice({
//                   dealerId: req.body.dealerId,
//                   priceBook: totalDataComing[i].priceBookDetail._id,
//                   unique_key: unique_key,
//                   status: true,
//                   retailPrice: totalDataComing[i].retailPrice != "" ? totalDataComing[i].retailPrice : 0,
//                   brokerFee: totalDataComing[i].retailPrice - wholesalePrice,
//                   wholesalePrice
//                 })
//                 totalDataComing[i].status = "Dealer catalog created successully"
//                 totalDataComing[i].duplicates.forEach((index, i) => {
//                   totalDataComing[index].status = i == 0 ? "Dealer catalog created successully" : "Dealer catalog updated successully";
//                 })
//               }
//             }
//           }
//           const csvArray = totalDataComing.map((item) => {
//             return {
//               priceBook: item.priceBook ? item.priceBook : "",
//               retailPrice: item.retailPrice ? item.retailPrice : "",
//               status: item.status
//             }
//           })

//           function countStatus(array, status) {
//             return array.filter(item => item.status === status).length;
//           }
//           const countNotExist = countStatus(csvArray, "price catalog does not exist");
//           const countNotUnique = countStatus(csvArray, "not unique");
//           const totalCount = csvArray.length

//           function convertArrayToHTMLTable(array) {
//             const header = Object.keys(array[0]).map(key => `<th>${key}</th>`).join('');
//             const rows = array.map(obj => {
//               const values = Object.values(obj).map(value => `<td>${value}</td>`);
//               values[2] = `${values[2]}`;
//               return values.join('');
//             });

//             const htmlContent = `<html>
//                   <head>
//                       <style>
//                           table {
//                               border-collapse: collapse;
//                               width: 100%;
//                           }
//                           th, td {
//                               border: 1px solid #dddddd;
//                               text-align: left;
//                               padding: 8px;
//                           }
//                           th {
//                               background-color: #f2f2f2;
//                           }
//                       </style>
//                   </head>
//                   <body>
//                       <table>
//                           <thead><tr>${header}</tr></thead>
//                           <tbody>${rows.map(row => `<tr>${row}</tr>`).join('')}</tbody>
//                       </table>
//                   </body>
//               </html>`;

//             return htmlContent;
//           }
//           const htmlTableString = convertArrayToHTMLTable(csvArray);
//           const mailing1 = sgMail.send(emailConstant.sendCsvFile('yashasvi@codenomad.net', htmlTableString));
//           let userQuery = { accountId: { $in: [req.body.dealerId] }, isPrimary: true }
//           let newValues1 = {
//             $set: {
//               email: allUserData[0].email,
//               firstName: allUserData[0].firstName,
//               lastName: allUserData[0].lastName,
//               roleId: '656f08041eb1acda244af8c6',
//               phoneNumber: allUserData[0].phoneNumber,
//               position: allUserData[0].position,
//               status: allUserData[0].status ? true : false,
//             }
//           }
//           let updateStatus1 = await userService.updateUser(userQuery, newValues1, { new: true })

//           let allUsersData = allUserData.map((obj, index) => ({
//             ...obj,
//             roleId: '656f08041eb1acda244af8c6',
//             accountId: req.body.dealerId,
//             metaId: req.body.dealerId,
//             isPrimary: index === 0 ? true : false,
//             status: !req.body.isAccountCreate || req.body.isAccountCreate == 'false' ? false : obj.status
//           }));
//           if (allUsersData.length > 1) {
//             allUsersData = [...allUsersData.slice(0, 0), ...allUsersData.slice(1)];
//             const createUsers = await userService.insertManyUser(allUsersData);
//             if (!createUsers) {
//               res.send({
//                 code: constant.errorCode,
//                 message: "Unable to save users"
//               });
//               return;
//             }
//           }
//           let dealerQuery = { _id: req.body.dealerId }

//           let newValues = {
//             $set: {
//               status: "Approved",
//               accountStatus: true,
//               serviceCoverageType: req.body.serviceCoverageType,
//               isShippingAllowed: req.body.isShippingAllowed,
//               isAccountCreate: isAccountCreate,
//               coverageType: req.body.coverageType,
//               termCondition: termFile,
//               isServicer: data.isServicer ? data.isServicer : false
//             }
//           }
//           let dealerStatus = await dealerService.updateDealer(dealerQuery, newValues, { new: true })
//           if (!dealerStatus) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to approve dealer status"
//             });
//             return;
//           }
//           let statusUpdateCreateria = { accountId: { $in: [req.body.dealerId] } }
//           let updateData = {
//             $set: {
//               approvedStatus: 'Approved'
//             }
//           }
//           let updateUserStatus = await userService.updateUser(statusUpdateCreateria, updateData, { new: true })
//           if (req.body.isAccountCreate) {
//             let resetPasswordCode = randtoken.generate(4, '123456789')
//             let resetLink = `http://15.207.221.207/newPassword/${singleDealerUser._id}/${resetPasswordCode}`
//             constmailing = await sgMail.send(emailConstant.dealerApproval(singleDealerUser.email, { link: resetLink }))
//             let updateStatus = await userService.updateUser({ _id: singleDealerUser._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })
//           }
//           if (req.body.isServicer) {
//             const CountServicer = await providerService.getServicerCount();

//             let servicerObject = {
//               name: data.name,
//               street: data.street,
//               city: data.city,
//               zip: data.zip,
//               dealerId: req.body.dealerId,
//               state: data.state,
//               country: data.country,
//               status: data.status,
//               accountStatus: "Approved",
//               unique_key: Number(CountServicer.length > 0 && CountServicer[0].unique_key ? CountServicer[0].unique_key : 0) + 1
//             }

//             let createData = await providerService.createServiceProvider(servicerObject)
//           }
//           res.send({
//             code: constant.successCode,
//             message: 'Successfully Created',
//           });
//           return;

//         }

//         return;
//       }
//       else {
//         const existingDealer = await dealerService.getDealerByName({ name: data.name }, { isDeleted: 0, __v: 0 });
//         // const existingDealer = await dealerService.getDealerByName({ name: { '$regex': data.name, '$options': 'i' } }, { isDeleted: 0, __v: 0 });
//         if (existingDealer) {
//           res.send({
//             code: constant.errorCode,
//             message: 'Dealer name already exists',
//           });
//           return
//         }
//         let emailCheck = await userService.findOneUser({ email: data.email }, {});
//         if (emailCheck) {
//           res.send({
//             code: constant.errorCode,
//             message: "Primary user email already exist"
//           })
//           return;
//         }
//         if (savePriceBookType == 'yes') {
//           priceBook = dealerPriceArray.map((dealer) => dealer.priceBookId);
//           const priceBookCreateria = { _id: { $in: priceBook } }
//           checkPriceBook = await priceBookService.getMultiplePriceBok(priceBookCreateria, { isDeleted: false })
//           if (checkPriceBook.length == 0) {
//             res.send({
//               code: constant.errorCode,
//               message: "Product does not exist.Please check the product"
//             })
//             return;
//           }

//           const missingProductNames = priceBook.filter(name => !checkPriceBook.some(product => product._id.equals(name)));
//           if (missingProductNames.length > 0) {
//             res.send({
//               code: constant.errorCode,
//               message: 'Some products is not created. Please check the product',
//               missingProductNames: missingProductNames
//             });
//             return;
//           }


//           let count = await dealerService.getDealerCount();

//           const dealerMeta = {
//             name: data.name,
//             street: data.street,
//             userAccount: req.body.customerAccountCreated,
//             city: data.city,
//             serviceCoverageType: req.body.serviceCoverageType,
//             isShippingAllowed: req.body.isShippingAllowed,
//             coverageType: req.body.coverageType,
//             isAccountCreate: req.body.isAccountCreate,
//             termCondition: termFile,
//             zip: data.zip,
//             state: data.state,
//             isServicer: data.isServicer ? data.isServicer : false,
//             country: data.country,
//             status: 'Approved',
//             accountStatus: true,
//             createdBy: data.createdBy,
//             unique_key: Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + 1
//           };
//           // Create Dealer Meta Data
//           const createMetaData = await dealerService.createDealer(dealerMeta);
//           if (!createMetaData) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to create dealer"
//             });
//             return;
//           }

//           if (data.isServicer) {
//             const CountServicer = await providerService.getServicerCount();

//             let servicerObject = {
//               name: data.name,
//               street: data.street,
//               city: data.city,
//               zip: data.zip,
//               dealerId: createMetaData._id,
//               state: data.state,
//               country: data.country,
//               status: data.status,
//               accountStatus: "Approved",
//               unique_key: Number(CountServicer.length > 0 && CountServicer[0].unique_key ? CountServicer[0].unique_key : 0) + 1
//             }

//             let createData = await providerService.createServiceProvider(servicerObject)
//           }


//           // Create User for primary dealer
//           // console.log("body----------------------------",req.body)
//           // console.log("allUserData----------------------------",allUserData);return;
//           let allUsersData = allUserData.map((obj, index) => ({
//             ...obj,
//             roleId: '656f08041eb1acda244af8c6',
//             accountId: createMetaData._id,
//             metaId: createMetaData._id,
//             position: obj.position || '', // Using the shorthand for conditional (obj.position ? obj.position : '')
//             isPrimary: index === 0 ? true : false,
//             status: !req.body.isAccountCreate || req.body.isAccountCreate == 'false' ? false : obj.status,
//             approvedStatus: 'Approved'
//           }));

//           // console.log("allUsersData--------------------------",allUsersData);

//           const createUsers = await userService.insertManyUser(allUsersData);

//           if (!createUsers) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to save users"
//             });
//             return;
//           }
//           //save Price Books for this dealer
//           count = await dealerPriceService.getDealerPriceCount();
//           const resultPriceData = dealerPriceArray.map((obj, index) => ({
//             'priceBook': obj.priceBookId,
//             'dealerId': createMetaData._id,
//             'brokerFee': Number(obj.retailPrice) - Number(obj.wholesalePrice),
//             'retailPrice': obj.retailPrice,
//             'wholesalePrice': obj.wholesalePrice,
//             "status": obj.status,
//             'unique_key': Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + index + 1,
//           }));

//           const createPriceBook = await dealerPriceService.insertManyPrices(resultPriceData);
//           if (!createPriceBook) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to save price book"
//             });
//             return;
//           }
//           //Approve status 


//           if (req.body.isAccountCreate) {
//             let resetPasswordCode = randtoken.generate(4, '123456789')
//             let resetLink = `http://15.207.221.207/newPassword/${createUsers[0]._id}/${resetPasswordCode}`
//             constmailing = await sgMail.send(emailConstant.dealerApproval(createUsers[0].email, { link: resetLink }))
//             let updateStatus = await userService.updateUser({ _id: createUsers[0]._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })
//             // if (mailing) {
//             //   let updateStatus = await userService.updateUser({ _id: createUsers[0]._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })
//             //   res.send({
//             //     code: constant.successCode,
//             //     message: 'Successfully Created',
//             //   });
//             //   return;
//             // }
//           }
//           res.send({
//             code: constant.successCode,
//             message: 'Successfully Created',
//           });

//           return; 

//         }

//         else if (savePriceBookType == 'no') {
//           if (!req.file) {
//             res.send({ 
//               code: constant.errorCode,
//               message: "No file uploaded"
//             })
//             return;
//           }

//           let csvName = priceFile.filename
//           const csvWriter = createCsvWriter({
//             path: './uploads/resultFile/' + csvName,
//             header: [
//               { id: 'priceBook', title: 'Price Book' },
//               { id: 'status', title: 'Status' },
//               { id: 'reason', title: 'Reason' },
//               // Add more headers as needed
//             ],
//           });

//           const count = await dealerService.getDealerCount();
//           const results = [];
//           let priceBookName = [];
//           let allpriceBookIds = [];
//           let newArray1;
//           let allPriceBooks;
//           const wb = XLSX.readFile(priceFile.path);
//           const sheets = wb.SheetNames;
//           const ws = wb.Sheets[sheets[0]];
//           const headers = [];
//           for (let cell in ws) {
//             // Check if the cell is in the first row and has a non-empty value
//             if (/^[A-Z]1$/.test(cell) && ws[cell].v !== undefined && ws[cell].v !== null && ws[cell].v.trim() !== '') {
//               headers.push(ws[cell].v);
//             }
//           }

//           if (headers.length !== 2) {
//             res.send({
//               code: constant.errorCode,
//               message: "Invalid file format detected. The sheet should contain exactly two columns."
//             })
//             return
//           }
//           let totalDataComing1 = XLSX.utils.sheet_to_json(wb.Sheets[sheets[0]]);
//           totalDataComing1 = totalDataComing1.map(item => {
//             console.log("item check )))))))))))))))))))", item)
//             if (!item.priceBook) {
//               return { priceBook: '', 'RetailPrice': item['retailPrice'] };
//             }
//             return item;
//           });
//           const totalDataComing = totalDataComing1.map(item => {
//             console.log("ccccc++++++++dddddddddddddddddd+++++++", item)

//             const keys = Object.keys(item);
//             console.log("keys++++++++dddddddddddddddddd+++++++", keys)

//             return {
//               priceBook: item[keys[0]],
//               retailPrice: item[keys[1]],
//               duplicates: [],
//               exit: false
//             };
//           });
//           totalDataComing.forEach((data, index) => {
//             if (!data.retailPrice || typeof (data.retailPrice) != 'number' || data.retailPrice <= 0) {
//               // console.log("data2--------------------------",data)
//               data.status = "Dealer catalog retail price is not valid";
//               totalDataComing[index].retailPrice = data.retailPrice
//               data.exit = true;
//             }
//             else {
//               data.status = null
//             }
//           })
//           const dealerMeta = {
//             name: data.name,
//             street: data.street,
//             userAccount: req.body.customerAccountCreated,
//             city: data.city,
//             zip: data.zip,
//             serviceCoverageType: req.body.serviceCoverageType,
//             isShippingAllowed: req.body.isShippingAllowed,
//             coverageType: req.body.coverageType,
//             isAccountCreate: isAccountCreate,
//             termCondition: termFile,
//             state: data.state,
//             country: data.country,
//             isServicer: data.isServicer ? data.isServicer : false,
//             status: 'Approved',
//             accountStatus: true,
//             createdBy: data.createdBy,
//             unique_key: Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + 1
//           };
//           // Create Dealer Meta Data
//           const createMetaData = await dealerService.createDealer(dealerMeta);
//           if (!createMetaData) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to create dealer"
//             });
//             return;
//           }
//           if (data.isServicer) {
//             const CountServicer = await providerService.getServicerCount();

//             let servicerObject = {
//               name: data.name,
//               street: data.street,
//               city: data.city,
//               zip: data.zip,
//               dealerId: createMetaData._id,
//               state: data.state,
//               country: data.country,
//               status: data.status,
//               accountStatus: "Approved",
//               unique_key: Number(CountServicer.length > 0 && CountServicer[0].unique_key ? CountServicer[0].unique_key : 0) + 1
//             }

//             let createData = await providerService.createServiceProvider(servicerObject)
//           }
//           const repeatedMap = {};
//           for (let i = totalDataComing.length - 1; i >= 0; i--) {
//             if (totalDataComing[i].exit) {
//               continue;
//             }
//             // if (repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()] >= 0) {
//             //   totalDataComing[i].status = "not unique";
//             //   totalDataComing[i].exit = true;
//             //   const index = repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()];
//             //   totalDataComing[index].duplicates.push(i);
//             // } else {

//             //   repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase()] = i;
//             //   totalDataComing[i].status = null;
//             // }

//             if (repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()] >= 0) {
//               totalDataComing[i].status = "not unique";
//               totalDataComing[i].exit = true;
//               const index = repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()];
//               totalDataComing[index].duplicates.push(i);
//             } else {
//               repeatedMap[totalDataComing[i].priceBook.toString().toUpperCase().replace(/\s+/g, ' ').trim()] = i;
//               totalDataComing[i].status = null;
//             }
//           }
//           const pricebookArrayPromise = totalDataComing.map(item => {
//             if (!item.status) return priceBookService.findByName1({ name: item.priceBook ? new RegExp(`^${item.priceBook.toString().replace(/\s+/g, ' ').trim()}$`, 'i') : '', status: true });
//             return null;
//           })
//           const pricebooksArray = await Promise.all(pricebookArrayPromise);

//           for (let i = 0; i < totalDataComing.length; i++) {
//             if (!pricebooksArray[i]) {
//               if (!totalDataComing[i].exit) {
//                 totalDataComing[i].status = "price catalog does not exist";
//                 totalDataComing[i].duplicates.forEach((index) => {
//                   totalDataComing[index].status = "price catalog does not exist";
//                 })
//               }
//               totalDataComing[i].priceBookDetail = null
//             } else {
//               totalDataComing[i].priceBookDetail = pricebooksArray[i];
//             }
//           }
//           const dealerArrayPromise = totalDataComing.map(item => {

//             if (item.priceBookDetail) return dealerPriceService.getDealerPriceById({ dealerId: new mongoose.Types.ObjectId(createMetaData._id), priceBook: item.priceBookDetail._id }, {});
//             return false;
//           })

//           const dealerArray = await Promise.all(dealerArrayPromise);
//           for (let i = 0; i < totalDataComing.length; i++) {
//             if (totalDataComing[i].priceBookDetail) {
//               if (dealerArray[i]) {
//                 dealerArray[i].retailPrice = totalDataComing[i].retailPrice != undefined ? totalDataComing[i].retailPrice : dealerArray[i].retailPrice;
//                 dealerArray[i].brokerFee = dealerArray[i].retailPrice - dealerArray[i].wholesalePrice
//                 await dealerArray[i].save();

//                 totalDataComing[i].status = "Dealer catalog updated successfully";
//                 totalDataComing[i].duplicates.forEach((index) => {
//                   totalDataComing[index].status = "Dealer catalog updated successfully";
//                 })

//               } else {
//                 const count = await dealerPriceService.getDealerPriceCount();
//                 let unique_key = Number(count.length > 0 && count[0].unique_key ? count[0].unique_key : 0) + 1
//                 let wholesalePrice = totalDataComing[i].priceBookDetail.reserveFutureFee + totalDataComing[i].priceBookDetail.reinsuranceFee + totalDataComing[i].priceBookDetail.adminFee + totalDataComing[i].priceBookDetail.frontingFee;
//                 await dealerPriceService.createDealerPrice({
//                   dealerId: createMetaData._id,
//                   priceBook: totalDataComing[i].priceBookDetail._id,
//                   unique_key: unique_key,
//                   status: true,
//                   retailPrice: totalDataComing[i].retailPrice != "" ? totalDataComing[i].retailPrice : 0,
//                   brokerFee: totalDataComing[i].retailPrice - wholesalePrice,
//                   wholesalePrice
//                 })
//                 totalDataComing[i].status = "Dealer catalog created successfully"
//                 totalDataComing[i].duplicates.forEach((index, i) => {
//                   totalDataComing[index].status = i == 0 ? "Dealer catalog created successfully" : "Dealer catalog updated successfully";
//                 })
//               }
//             }
//           }
//           const csvArray = totalDataComing.map((item) => {
//             return {
//               priceBook: item.priceBook ? item.priceBook : "",
//               retailPrice: item.retailPrice ? item.retailPrice : "",
//               status: item.status
//             }
//           })

//           function countStatus(array, status) {
//             return array.filter(item => item.status === status).length;
//           }
//           const countNotExist = countStatus(csvArray, "price catalog does not exist");
//           const countNotUnique = countStatus(csvArray, "not unique");
//           const totalCount = csvArray.length
//           function convertArrayToHTMLTable(array) {
//             const header = Object.keys(array[0]).map(key => `<th>${key}</th>`).join('');
//             const rows = array.map(obj => {
//               const values = Object.values(obj).map(value => `<td>${value}</td>`);
//               values[2] = `${values[2]}`;
//               return values.join('');
//             });

//             const htmlContent = `<html>
//                 <head>
//                     <style>
//                         table {
//                             border-collapse: collapse;
//                             width: 100%;
//                         }
//                         th, td {
//                             border: 1px solid #dddddd;
//                             text-align: left;
//                             padding: 8px;
//                         }
//                         th {
//                             background-color: #f2f2f2;
//                         }
//                     </style>
//                 </head>
//                 <body>
//                     <table>
//                         <thead><tr>${header}</tr></thead>
//                         <tbody>${rows.map(row => `<tr>${row}</tr>`).join('')}</tbody>
//                     </table>
//                 </body>
//             </html>`;

//             return htmlContent;
//           }
//           const htmlTableString = convertArrayToHTMLTable(csvArray);
//           const mailing1 = sgMail.send(emailConstant.sendCsvFile('yashasvi@codenomad.net', htmlTableString));
//           let allUsersData = allUserData.map((obj, index) => ({
//             ...obj,
//             roleId: '656f08041eb1acda244af8c6',
//             accountId: createMetaData._id,
//             metaId: createMetaData._id,
//             position: obj.position || '', // Using the shorthand for conditional (obj.position ? obj.position : '')
//             isPrimary: index === 0 ? true : false,
//             status: !req.body.isAccountCreate || req.body.isAccountCreate == 'false' ? false : obj.status,
//             approvedStatus: 'Approved'
//           }));

//           const createUsers = await userService.insertManyUser(allUsersData);
//           if (!createUsers) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to save users"
//             });
//             return;
//           }
//           let dealerQuery = { _id: createMetaData._id }
//           let newValues = {
//             $set: {
//               status: "Approved",
//             }
//           }
//           let dealerStatus = await dealerService.updateDealer(dealerQuery, newValues, { new: true })
//           if (!dealerStatus) {
//             res.send({
//               code: constant.errorCode,
//               message: "Unable to approve dealer status"
//             });
//             return;
//           }

//           let statusUpdateCreateria = { accountId: { $in: [createMetaData._id] } }
//           let updateData = {
//             $set: {
//               approvedStatus: 'Approved'
//             }
//           }
//           let updateUserStatus = await userService.updateUser(statusUpdateCreateria, updateData, { new: true })

//           //  let userStatus = await dealerService.updateDealer(dealerQuery, newValues, { new: true })

//           if (req.body.isAccountCreate) {
//             let resetPasswordCode = randtoken.generate(4, '123456789')
//             let resetLink = `http://15.207.221.207/newPassword/${createUsers[0]._id}/${resetPasswordCode}`
//             constmailing = await sgMail.send(emailConstant.dealerApproval(createUsers[0].email, { link: resetLink }))
//             let updateStatus = await userService.updateUser({ _id: createUsers[0]._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })
//             // if (mailing) {
//             //   let updateStatus = await userService.updateUser({ _id: createUsers[0]._id }, { resetPasswordCode: resetPasswordCode, isResetPassword: true }, { new: true })
//             //   res.send({
//             //     code: constant.successCode,
//             //     message: 'Successfully Created',
//             //   });
//             //   return;
//             // }
//             // else {
//             //   res.send({
//             //     code: constant.errorCode,
//             //     message: 'Failed ! Please check email.',
//             //   });

//             //   return;
//             // }
//           }
//           res.send({
//             code: constant.successCode,
//             message: 'Successfully Created',
//           });

//         }


//       }

//     })
//   } catch (err) {
//     return res.send({
//       code: constant.errorCode,
//       message: err.message
//     });
//   }
// };


//axios.post('apiUrl',{body},{token})



eligibility check 

  if (req.body.coverageType == "Breakdown") {
                        if (req.body.serviceCoverageType == "Labour") {
                            if (new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));

                            } else {
                                minDate = findMinDate(new Date(dateCheck.setMonth(100000)), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate));
                            }

                        } else if (req.body.serviceCoverageType == "Parts") {
                            if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));
                            } else {
                                minDate = findMinDate(new Date(dateCheck.setMonth(100000)), new Date(partsWarrantyDate), new Date(labourWarrantyDate.setMonth(100000)));
                            }

                        } else {
                            if (new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(partsWarrantyDate).setHours(0, 0, 0, 0) > new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck.setMonth(100000)), new Date(partsWarrantyDate), new Date(labourWarrantyDate.setMonth(100000)));

                            } else if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(labourWarrantyDate).setHours(0, 0, 0, 0) > new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck.setMonth(100000)), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate));

                            } else if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));

                            } else {
                                minDate = findMinDate(new Date(dateCheck.setMonth(100000)), new Date(partsWarrantyDate), new Date(labourWarrantyDate));
                            }
                        }
                    } else {
                        if (req.body.serviceCoverageType == "Labour") {
                            if (new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));

                            } else {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate));
                            }

                        } else if (req.body.serviceCoverageType == "Parts") {
                            if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));
                            } else {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate), new Date(labourWarrantyDate.setMonth(100000)));
                            }

                        } else {
                            if (new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(partsWarrantyDate).setHours(0, 0, 0, 0) > new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate), new Date(labourWarrantyDate.setMonth(100000)));

                            } else if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(labourWarrantyDate).setHours(0, 0, 0, 0) > new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate));

                            } else if (new Date(partsWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0) && new Date(labourWarrantyDate).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate.setMonth(100000)), new Date(labourWarrantyDate.setMonth(100000)));

                            } else {
                                minDate = findMinDate(new Date(dateCheck), new Date(partsWarrantyDate), new Date(labourWarrantyDate));
                            }
                        }
                    }